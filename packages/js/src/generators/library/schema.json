{
  "$schema": "http://json-schema.org/schema",
  "$id": "NxTypescriptLibrary",
  "cli": "nx",
  "title": "Create a TypeScript Library",
  "description": "Create a TypeScript Library.",
  "type": "object",
  "examples": [
    {
      "command": "nx g lib mylib --directory=myapp",
      "description": "Generate libs/myapp/mylib"
    }
  ],
  "properties": {
    "name": {
      "type": "string",
      "description": "Library name.",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the library?",
      "pattern": "^[a-zA-Z].*$"
    },
    "directory": {
      "type": "string",
      "description": "A directory where the lib is placed."
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint", "none"],
      "default": "eslint"
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["jest", "none"],
      "description": "Test runner to use for unit tests.",
      "default": "jest"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the library (used for linting)."
    },
    "skipFormat": {
      "description": "Skip formatting files.",
      "type": "boolean",
      "default": false
    },
    "skipTsConfig": {
      "type": "boolean",
      "description": "Do not update tsconfig.json for development experience.",
      "default": false
    },
    "skipBabelrc": {
      "type": "boolean",
      "description": "Do not generate `.babelrc` file. Useful for Node libraries that are not compiled by Babel."
    },
    "testEnvironment": {
      "type": "string",
      "enum": ["jsdom", "node"],
      "description": "The test environment to use if unitTestRunner is set to jest.",
      "default": "jsdom"
    },
    "supportTsx": {
      "type": "boolean",
      "description": "Setup `tsx` support.",
      "default": false
    },
    "importPath": {
      "type": "string",
      "description": "The library name used to import it, like @myorg/my-awesome-lib."
    },
    "pascalCaseFiles": {
      "type": "boolean",
      "description": "Use pascal case file names.",
      "alias": "P",
      "default": false
    },
    "js": {
      "type": "boolean",
      "description": "Generate JavaScript files rather than TypeScript files.",
      "default": false
    },
    "strict": {
      "type": "boolean",
      "description": "Whether to enable tsconfig strict mode or not.",
      "default": true
    },
    "publishable": {
      "type": "boolean",
      "default": false,
      "description": "Generate a publishable library."
    },
    "buildable": {
      "type": "boolean",
      "default": true,
      "description": "Generate a buildable library."
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
      "default": false
    },
    "config": {
      "type": "string",
      "enum": ["workspace", "project", "npm-scripts"],
      "default": "project",
      "description": "Determines whether the project's executors should be configured in `workspace.json`, `project.json` or as npm scripts."
    },
    "compiler": {
      "type": "string",
      "enum": ["tsc", "swc"],
      "default": "tsc",
      "description": "The compiler used by the build and test targets"
    },
    "module": {
      "type": "string",
      "enum": ["cjs", "none"],
      "default": "cjs",
      "description": "The module type to use for this library"
    },
    "skipTypeCheck": {
      "type": "boolean",
      "description": "Whether to skip TypeScript type checking for SWC compiler.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`.",
      "type": "boolean"
    }
  },
  "required": ["name"]
}
